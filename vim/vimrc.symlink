" Environment {
  " Basics {
    set nocompatible      " be viMproved
    filetype off          " required as per vundle install

    " vundle bits
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()

    " clipboard stuffs
    if has ("unix") && "Darwin" != system("echo -n \"$(uname)\"")
      " on Linux use + register for copy-paste
      set clipboard=unnamedplus
    else
      " one mac and windows, use * register for copy-paste
      set clipboard=unnamed
    endif
  " }

  " Windows Compatibility {
    if has('win32') || has('win64')
      set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
    endif
  " }

    let NERDTreeHijackNetrw = 0

  " Bundles! {

    " required as per vundle install
    Bundle 'gmarik/vundle'

    " General { general purpose library of vimscript
      Bundle 'tomtom/tlib_vim'
      " Themes {
        Bundle 'NSError/vim-tomorrow-theme'
        Bundle 'noahfrederick/Hemisu'
        Bundle 'nanotech/jellybeans.vim'
        Bundle 'altercation/vim-colors-solarized'
        Bundle 'vim-scripts/Liquid-Carbon'
        Bundle 'nelstrom/vim-mac-classic-theme'
      " }
      " ensures that there's only ever one NERDTree, which is the behavior
      " that I want; note that these are terrible on windows due to it
      " trying to scan my entire user folder on startup. probably a way
      " around it, but i'm much too lazy to find it.
      if !has('win32') && !has('win64')
      " the NERDTree, because NetRW is nice, but not so nice at the same
      " time
        Bundle 'scrooloose/nerdtree'
        Bundle 'jistr/vim-nerdtree-tabs'
      endif
      " i tried living without this, doc, but it just don't work
      Bundle 'ervandew/supertab'
      "Bundle 'jdonaldson/vim-addon-local-vimrc'

      " something I need to learn to use more often
      "Bundle 'tpope/vim-surround'
      " another thing that I need to learn to use more often
      Bundle 'kien/ctrlp.vim'

      " a motions tool I need to learn to use more
      Bundle 'Lokaltog/vim-easymotion'
      " stuff gets stupid without this
      Bundle 'nathanaelkane/vim-indent-guides'
      " a thing I honestly don't use
      Bundle 'tpope/vim-git'
      " hit <C-O> and then everything goes away! it's so zen!
      Bundle 'vim-scripts/ZoomWin'
      " super-cool tab-based stuff
      Bundle 'godlygeek/tabular'
    " }

    " Programming {
      " syntax checking for many languages. truly useful feature to have
      " around.
      "Bundle 'scrooloose/syntastic'
      " some kind of git integration. i don't use this much (even at all)
      "Bundle 'tpope/vim-fugitive'
      " but i use this ALL the time!
      Bundle 'scrooloose/nerdcommenter'
      " if we have ctags, enable the tagbar (which i don't use much at all)
      "if executable('ctags')
          "Bundle 'majutsushi/tagbar'
      "endif
      " puts end statements where it makes sense in certain programming
      " languages (ruby, mainly)
      Bundle 'tpope/vim-endwise'
      " something i need to learn to use more
      "Bundle 'michaeljsmith/vim-indent-object'
      " automagically sets the current builder (scons, make, rake, etc)
      "Bundle 'johnsyweb/vim-makeshift'
    " }

    " Python {
      "Bundle 'klen/python-mode'
      "Bundle 'python.vim'
      "Bundle 'python_match.vim'
      "Bundle 'pythoncomplete'
      "Bundle 'vim-scripts/scons.vim'
      "Bundle 'vim-scripts/Scons-compiler-plugin'
    " }

    " JS & Less CSS {
      Bundle 'leshill/vim-json'
      Bundle 'groenewege/vim-less'
      Bundle 'pangloss/vim-javascript'
      Bundle 'briancollins/vim-jst'
      Bundle 'kchmck/vim-coffee-script'
      Bundle 'ap/vim-css-color'
      Bundle 'hail2u/vim-css3-syntax'
      Bundle 'mmalecki/vim-node.js'
    " }

    " HTML, CSS, SASS, & friends {
      Bundle 'pthree/html5.vim'
      Bundle 'amirh/HTML-AutoCloseTag'
      Bundle 'ChrisYip/Better-CSS-Syntax-for-Vim'
      Bundle 'tpope/vim-haml'
      Bundle 'cakebaker/scss-syntax.vim'
      Bundle 'groenewege/vim-less'
      Bundle 'nono/vim-handlebars'
    " }

    " Ruby! {
      Bundle 'vim-ruby/vim-ruby'
      Bundle 'tpope/vim-rails'
      let g:rubycomplete_buffer_loading = 1
      Bundle 'skwp/vim-rspec'
    " }

    " Etc? {
      Bundle 'tpope/vim-markdown'
      Bundle 'timcharper/textile.vim'
    " }
  " }
" }

" Configuration! {
"
  color liquidcarbon
"
  " resize window intelligently
  if has('gui_running') && has('autocmd')
    au VimResized * wincmd =
  endif

  " let g:nerdtree_tabs_smart_startup_focus=2

  " CtrlP ignore patterns
  let g:ctrlp_custom_ignore = {
              \ 'dir': '\.git$\|node_modules$\|\.hg$\|\.svn$',
              \ 'file': '\.exe$\|\.so$'
              \ }

  " vundle wants this; not totally sure why
  filetype plugin indent on

  " pilfered from Janus (mostly) {
    function! s:setupWrapping()
      set wrap
      set linebreak
      set textwidth=72
      set nolist
    endfunction
    if has("autocmd")
      " In Makefiles, use real tabs, not tabs expanded to spaces
      au FileType make setlocal noexpandtab

      au FileType markdown set spell
      au FileType gitcommit set spell

      " Force ftypes on markdown and use wrapping
      au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setupWrapping()

      " use 4 spaces for python indentation, as per Python preferences in like
      " PEP4 or something like that.
      au FileType python setlocal softtabstop=4 tabstop=4 shiftwidth=4

      " Remember last location in file, but not for commit messages.
      " see :help last-position-jump - btw, this little bugger rocks!
      au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g`\"" | endif
    endif

    " maps! {
      " w!! = sudo save file - mighty userful little booger!
      cmap w!! %!sudo tee > /dev/null %
      " format entire file
      nmap <leader>fef ggVG=
      " use arrows to go up a screen line, not a literal line
      map <Down> gj
      map <Up> gk
      " Default mapping, <leader>n
      map <leader>n :NERDTreeToggle<CR>
      map <Leader>n <plug>NERDTreeTabsToggle<CR>
    " }



    " Other and misc configuration {
      " use the mouse on supporting ttys and stuff
      set mouse=a
      " utf-8 is da bomb!
      scriptencoding utf-8

      " slightly less annoying command failures
      set shortmess+=filmnrxoOtT
      " view folds, cursor, and other things i don't know about
      set viewoptions=folds,options,cursor,unix,slash
      " go one past line end for slightly more betterer editing experience
      set virtualedit=onemore
      " gimme a fat history, albert!
      set history=1000
      " write buffering? sounds too slow to me
      set nowb
      " swaps seem to not work so well in windows
      if has('win32') || has('win64')
        set noswapfile
      endif

      " LINE NUMBERZ!!!! <3
      set number
      " personally I use a meterstick
      set ruler
      " syntax on, and now enabled. perhaps redundant
      syntax enable

      " set up tabstops and widths
      set tabstop=2
      set shiftwidth=2
      set expandtab

      " not sure what this does
      set list

      " backspace over stuff, yoh
      set backspace=indent,eol,start

      " not sure what this does, either
      if exists("g:enable_mvim_shift_arrow")
        let macvim_hig_shift_movement = 1 " mvim shift-arrow-keys
      endif

      " List chars {
        set listchars=""                  " Reset the listchars
        set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
        set listchars+=trail:.            " show trailing spaces as dots
        set listchars+=extends:>          " The character to show in the last column when wrap is
                                          " off and the line continues beyond the right of the screen
        set listchars+=precedes:<         " The character to show in the last column when wrap is
      " }

      " Syntastic {
        "let g:syntastic_enable_signs=1
        "let g:syntastic_error_symbol='✗'
        "let g:syntastic_warning_symbol='⚠'
        "let g:syntastic_enable_balloons=1
      " }

      " Searching {
        set hlsearch    " highlight matches
        set incsearch   " incremental searching
        set ignorecase  " searches are case insensitive...
        set smartcase   " ... unless they contain at least one capital letter

        " Wild settings {
          " TODO: Investigate the precise meaning of these settings
          " set wildmode=list:longest,list:full
          " Disable output and VCS files
          set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

          " Disable archive files
          set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

          " Ignore bundler and sass cache
          set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

          " Disable temp and backup files
          set wildignore+=*.swp,*~,._*
        " }
      " }

      " Backup and swap files {
      if has('win32') || has('win64')
        set backupdir=~/.vim_backup//    " where to put backup files.
        set directory=~/.vim_temp//      " where to put swap files.
      endif
      " }

      " statusline {
        if has("statusline") && !&cp
          set laststatus=2  " always show the status bar
          set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P
          " Start the status line
          " set statusline=%f\ %m\ %r
          " set statusline+=Line:%l/%L[%p%%]
          " set statusline+=Col:%v
          " set statusline+=Buf:#%n
          " set statusline+=[%b][0x%B]
        endif
      " }

      if has('gui_running')
        set cursorline " show the cursor line by highlight
      endif
      set showcmd " what did this do?
      set ttyfast " just assume we have a fast terminal

      au BufNewFile,BufRead SCons* set filetype=scons

      " cursor shape
      let &t_SI = "\<Esc>]50;CursorShape=1\x7"
      let &t_EI = "\<Esc>]50;CursorShape=0\x7"

      " font stuff
      if has('gui_running')
        if has('win32') || has('win64')
          " it's gvim
          set guifont=Lucida\ Console:h10
        elseif has('gui_macvim')
          " it's macvim
          set guifont=Menlo:h15
        endif
      endif
    " }

    " scrolling {
      set scrolloff=3
      set sidescrolloff=5
      set sidescroll=1
     " }
  " }
" } i am the master of gratuitous indentation, ain't i?
